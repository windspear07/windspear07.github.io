---
layout: post
title:  "ansible"
date:   2018-11-03 11:07:01 +0000
categories: Linux 
---

### 概述

中心化运维工具。从一个主控机操作集群内的机器。适用于量不太大的集群。

### 一、安装

主机需要python2.6或者2.7，系统为linux
托管节点要求python2.4以上

1. centos

        sudo yum install ansible

2. ubuntu

        sudo apt-get install software-properties-common
        sudo apt-add-repository ppa:ansible/ansible
        sudo apt-get update
        sudo apt-get install ansible

### 二、准备工作

1. 免密登录

2. 添加配置文件

编辑/etc/ansible/hosts，添加带连接的机器

        [web]
        192.168.1.159 ansible_connection=ssh ansible_ssh_user=root
        192.168.1.160 ansible_connection=ssh ansible_ssh_user=root

3. test ping

        ansible all -m ping
        ##指定用户
        ansible all -m ping -u user01
        #运行命令
        ansible all -a "/bin/echo hello"

### 三、Inventory文件

设置别名

        jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50

指定连接名

        [targets]
        localhost              ansible_connection=local
        other1.example.com     ansible_connection=ssh        ansible_ssh_user=mpdehaan
        other2.example.com     ansible_connection=ssh        ansible_ssh_user=mdehaan

### 四、patterns

        ansible <pattern_goes_here> -m <module_name> -a <arguments>

Patterns指我们怎样确定一台主机来管理

ad-hoc与playbook是两种模式

        ##启动10个进程执行
        ansible atlanta -a "/sbin/reboot" -f 10

### 五、模块

采用ad-hoc演示

        #shell
        ansible web -m shell -a 'echo $TERM'

        #文件传输

        ##复制文件
        ansible webservers -m copy -a "src=/etc/hosts dest=/tmp/hosts"
        #修改文件属性
        ansible webservers -m file -a "dest=/srv/foo/a.txt mode=600"
        ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan"
        ##删除
        ansible webservers -m file -a "dest=/path/to/c state=absent"

        #### 创建用户
        ansible all -m user -a "name=foo password=<crypted password here>"
        ansible all -m user -a "name=foo state=absent"

### 六、playbook

playbooks 是一种简单的配置管理系统与多机器部署系统的基础.与现有的其他系统有不同之处,且非常适合于复杂应用的部署。

声明式的方式

        tasks:
        - name: disable selinux
            command: /sbin/setenforce 0

        tasks:
        - name: run this command and ignore the result
            shell: /usr/bin/somecommand || /bin/true

可以引用变量

        tasks:
        - name: create a virtual host file for {{ vhost }}
            template: src=somefile.j2 dest=/etc/httpd/conf.d/{{ vhost }}

执行命令：

        ansible-playbook playbook.yml -f 10

包含模式

        tasks:
        - include: tasks/foo.yml

foo.yml形如

        ---
        # possibly saved as tasks/foo.yml

        - name: placeholder foo
        command: /bin/foo

        - name: placeholder bar
        command: /bin/bar

调用时候传递参数

        tasks:
        - { include: wordpress.yml, wp_user: timmy, ssh_keys: [ 'keys/one.txt', 'keys/two.txt' ] }

最佳实践的结构

        site.yml
        webservers.yml
        fooservers.yml
        roles/
        common/
            files/
            templates/
            tasks/
            handlers/
            vars/
            defaults/
            meta/
        webservers/
            files/
            templates/
            tasks/
            handlers/
            vars/
            defaults/
            meta/

扫描规则

        如果 roles/x/tasks/main.yml 存在, 其中列出的 tasks 将被添加到 play 中
        如果 roles/x/handlers/main.yml 存在, 其中列出的 handlers 将被添加到 play 中
        如果 roles/x/vars/main.yml 存在, 其中列出的 variables 将被添加到 play 中
        如果 roles/x/meta/main.yml 存在, 其中列出的 “角色依赖” 将被添加到 roles 列表中 (1.3 and later)
        所有 copy tasks 可以引用 roles/x/files/ 中的文件，不需要指明文件的路径。
        所有 script tasks 可以引用 roles/x/files/ 中的脚本，不需要指明文件的路径。
        所有 template tasks 可以引用 roles/x/templates/ 中的文件，不需要指明文件的路径。
        所有 include tasks 可以引用 roles/x/tasks/ 中的文件，不需要指明文件的路径。


### 七、常用模块

copy模块：

        目的：把主控端/root目录下的a.sh文件拷贝到到指定节点上
        命令：ansible 10.1.1.113 -m copy -a 'src=/root/a.sh dest=/tmp/'

file模块：

        目的：更改指定节点上/tmp/t.sh的权限为755，属主和属组为root
        命令：ansible all -m file -a "dest=/tmp/t.sh mode=755 owner=root group=root"

cron模块：

        目的：在指定节点上定义一个计划任务，每隔3分钟到主控端更新一次时间
        命令：ansible all -m cron -a 'name="custom job" minute=*/3 hour=* day=* month=* weekday=* job="/usr/sbin/ntpdate 172.16.254.139"'

group模块：

        目的：在所有节点上创建一个组名为nolinux，gid为2014的组
        命令：ansible all -m group -a 'gid=2014 name=nolinux'

user模块：

        目的：在指定节点上创建一个用户名为nolinux，组为nolinux的用户
        命令：ansible 10.1.1.113 -m user -a 'name=nolinux groups=nolinux state=present'

yum模块：

        目的：在指定节点上安装 lrzsz 服务
        命令：ansible all -m yum -a "state=present name=httpd"

service模块：

        目的：启动指定节点上的 puppet 服务，并让其开机自启动
        命令：ansible 10.1.1.113 -m service -a 'name=puppet state=restarted enabled=yes'

script模块：

        目的：在指定节点上执行/root/a.sh脚本(该脚本是在ansible控制节点上的)
        命令：ansible 10.1.1.113 -m script -a '/root/a.sh'

ping模块：

        目的：检查指定节点机器是否还能连通
        命令：ansible 10.1.1.113 -m ping

command模块：
        
        目的：在指定节点上运行hostname命令
        命令：ansible 10.1.1.113 -m command -a 'hostname'

raw模块：

        目的：在10.1.1.113节点上运行hostname命令
        命令：ansible 10.1.1.113 -m raw-a 'hostname|tee'

get_url模块：

        目的：将文件下载到指定节点的/tmp目录下
        命令：ansible 10.1.1.1 -m get_url -a 'url=http://www.dd.com/favicon.ico dest=/tmp'

synchronize模块：

        目的：将主控方/root/a目录推送到指定节点的/tmp目录下
        命令：ansible 10.1.1.113 -m synchronize -a 'src=/root/a dest=/tmp/ compress=yes'

        #执行效果：
        delete=yes   使两边的内容一样（即以推送方为主）
        compress=yes  开启压缩，默认为开启
        --exclude=.git  忽略同步.git结尾的文件

template 

生成模板文件

        vi hello_world.txt.j2
        Hello "{{ dynamic_word }}"

        $ vi template_demo.yml
        ---
        - name: Play the template module
        hosts: localhost
        vars:
        dynamic_word: "World"

        tasks:
        - name: generation the hello_world.txt file
            template:
            src: hello_world.txt.j2
            dest: /tmp/hello_world.txt

        - name: show file context
            command: cat /tmp/hello_world.txt
            register: result

        - name: print stdout
            debug:
            msg: ""


### 参考资料

1. https://www.w3cschool.cn/automate_with_ansible/automate_with_ansible-db6727oq.html

2. http://ansible.com.cn/

3. https://www.cnblogs.com/keerya/p/8004566.html
